import { describe } from 'mocha'
import { expect } from 'chai'
import { compile, version } from '../src/compile'
import { compiler } from '../src/config'

describe('compile test', () => {
  it('compiled bytecode matches expected', async () => {
    const result = await compile('Hello.solpp')

    const bytecode = '60806040523480156100115760006000fd5b5060405161038838038061038883398181016040528101906100339190610082565b5b80600060006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff1602179055505b506100f3566100f2565b60008151905061007b816100d7565b5b92915050565b6000602082840312156100955760006000fd5b60006100a38482850161006c565b9150505b92915050565b60006100b8826100c0565b90505b919050565b600069ffffffffffffffffffff821690505b919050565b6100e0816100ad565b811415156100ee5760006000fd5b5b50565b5b610286806101026000396000f3fe6080604052610107565b8074ffffffffffffffffffffffffffffffffffffffffff16600060009054906101000a900469ffffffffffffffffffff1669ffffffffffffffffffff163460405160405180820390838587f150505050806000600a6101000a81548174ffffffffffffffffffffffffffffffffffffffffff021916908374ffffffffffffffffffffffffffffffffffffffffff1602179055508074ffffffffffffffffffffffffffffffffffffffffff163374ffffffffffffffffffffffffffffffffffffffffff167f949b6817b3866c0ba9a3b181ad03512ef785b2f591136ef0276d1b1ce3d60c90346040516100fb91906101e2565b60405180910390a35b50565b600436106101255760003560e01c8063e47a09bb1461012757610125565b005b610141600480360381019061013c91906101a7565b610009565b3660281161018b5760243560e01c801561018b576040519063ffffffff1660e01b815260040180602880360380929190913701604051809103906000692445f6e5cde8c2c70e4433f15b00610259565b6000813590506101a08161023e565b5b92915050565b6000602082840312156101ba5760006000fd5b60006101c884828501610191565b9150505b92915050565b6101db81610233565b82525b5050565b60006020820190506101f760008301846101d2565b5b92915050565b600061020982610211565b90505b919050565b600074ffffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b610247816101fe565b811415156102555760006000fd5b5b50565bfea165627a7a7230582000000000000000000000000000000000000000000000000000000000000000000029'
    console.log(result.byteCodes[0])
    expect(result.byteCodes[0]).to.equal(bytecode)
  })

  it('compiler version matched expected', async () => {
    const result = await version()

    expect(result).contains(compiler.version.replace('v', ''))
    console.log(result)
  })
})
