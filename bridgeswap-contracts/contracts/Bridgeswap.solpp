// SPDX-License-Identifier: Unlicense
pragma soliditypp >=0.7.99 <0.9.0;


contract Bridgeswap {

  struct Pair {
    bool initialized;

    tokenId tokenA;
    tokenId tokenB;

    uint256 supplyA;
    uint256 supplyB;

    uint256 totalPoolSupply;
    mapping(address => uint256) poolBalances;
  }

  struct PairFlag {
    tokenId tokenA;
    tokenId tokenB;
  }

  // --------------------
  // Events
  // --------------------

  event AddLiquidity(
    address indexed provider,
    tokenId indexed tokenAId,
    uint256 tokenAAmount,
    tokenId indexed tokenBId,
    uint256 tokenBAmount
  );
  event ChangeOwner(
    address indexed newOwner
  );
  event Deposit(
    address indexed provider,
    tokenId indexed tokenid,
    uint256 amount
  );
  event RemoveLiquidity(
    address indexed provider,
    tokenId indexed tokenAId,
    uint256 tokenAAmount,
    tokenId indexed tokenBId,
    uint256 tokenBAmount
  );
  event Swap(
    address indexed destination, 
    tokenId indexed tokenSold, 
    uint256 amountSold,
    tokenId indexed tokenBought, 
    uint256 amountBought
  );
  event Withdrawal(
    address indexed provider,
    tokenId indexed tokenid,
    uint256 amounta
  );

  // --------------------
  // State
  // --------------------

  address public owner;

  mapping(tokenId => mapping(tokenId => Pair)) pairs;
  PairFlag[] pairFlags;

  mapping(address => mapping(tokenId => uint256)) holdingPool;

  // --------------------
  // 
  // --------------------

  constructor() {
    owner = msg.sender;
  }

  // --------------------
  // Owned
  // --------------------

  // @notice Change owner.
  onMessage changeOwner(address _newOwner) {
      require(msg.sender == owner && _newOwner != owner);
      owner = _newOwner;
      emit ChangeOwner(_newOwner);
  }

  // --------------------
  // Pairs
  // --------------------

  // @notice Adds new pairs when called by owner.
  onMessage addPair(tokenId _tokenAIn, tokenId _tokenBIn) {
    require(msg.sender == owner);
    (tokenId _tokenA, tokenId _tokenB) = canonicalizePair(_tokenAIn, _tokenBIn);
    Pair storage _pair = pairs[_tokenA][_tokenB];
    require(!_pair.initialized);

    _pair.initialized = true;
    _pair.tokenA = _tokenA;
    _pair.tokenB = _tokenB;
    
    pairFlags.push(PairFlag({
      tokenA: _tokenA, 
      tokenB: _tokenB}
    ));
  }

  // @notice Total number of pairs.
  getter getPairCount() view returns (uint256) {
    return pairFlags.length;
  }

  // @notice Retrieve the given pair as a tuple of tokenIds.
  getter getPairAtIndex(uint256 _index) view returns (tokenId, tokenId) {
    require(_index < pairFlags.length);
    PairFlag storage _pairFlag = pairFlags[_index];
    return (_pairFlag.tokenA, _pairFlag.tokenB);
  }

  // @notice Order the given pair for lookups.
  function canonicalizePair(tokenId _tokenA, tokenId _tokenB) private pure returns (tokenId, tokenId) {
    require(_tokenA != _tokenB);
    
    if (_tokenA < _tokenB) {
      return (_tokenA, _tokenB);
    } else {
      return (_tokenB, _tokenA);
    }
  }

  // --------------------
  // Liquidity
  // --------------------

  // @notice How many tokens of a given type are in the holding pool on behalf of this account.
  getter getHoldingPoolBalance(address _address, tokenId _token) view returns (uint256) {
    return holdingPool[_address][_token];
  }

  // @notice Total supply of tokens for the given pair.
  getter getPairSupply(tokenId _tokenAIn, tokenId _tokenBIn) view returns (uint256, uint256) {
    (tokenId _tokenA, tokenId _tokenB) = canonicalizePair(_tokenAIn, _tokenBIn);
    Pair storage _pair = pairs[_tokenA][_tokenB];
    require(_pair.initialized);

    if (_pair.tokenA == _tokenAIn) {
      return (_pair.supplyA, _pair.supplyB);
    } else {
      return (_pair.supplyB, _pair.supplyA);
    }
  }

  // @notice Deposit sent tokens into the holding pool in preparation for adding liquidity.
  onMessage deposit() payable {
    require(msg.amount > 0);
    holdingPool[msg.sender][msg.tokenid] += msg.amount;
    emit Deposit(msg.sender, msg.tokenid, msg.amount);
  }

  // @notice Withdraw tokens in the holding pool held on behalf of this account.
  onMessage withdraw(uint256 _amount, tokenId _token) {
    uint256 _senderBalance = holdingPool[msg.sender][_token];
    require(_amount <= _senderBalance);
    holdingPool[msg.sender][_token] -= _amount;
    msg.sender.transfer(_token, _amount);
    emit Withdrawal(msg.sender, _token, _amount);
  }

  // @notice Get the amount of liquidity provided by address for a given pair.
  // @return The amount of liquidity provided.
  getter getLiquidityPoolBalance(address _address, tokenId _tokenAIn, tokenId _tokenBIn) view returns (uint256) {
    (tokenId _tokenA, tokenId _tokenB) = canonicalizePair(_tokenAIn, _tokenBIn);
    Pair storage _pair = pairs[_tokenA][_tokenB];
    require(_pair.initialized);
    return _pair.poolBalances[_address];
  }

  message addedLiquidity(tokenId indexed tokenA, tokenId indexed tokenB, uint256 amount);
  // @notice Move tokens from holding pool at current ratio.
  // @param _tokenAIn First token to add.
  // @param _amountTokenA Number of token A added.
  // @param _tokenBIn Second token to add.
  // @param _maxTokenB Maximum number of token B added. Transaction fails if exceeded.
  // @param _deadline Time after which this transaction can no longer be executed.
  // @return addedLiquidity The amount of liquidity added.
  onMessage addLiquidity(
    tokenId _tokenAIn,
    uint256 _amountTokenA, 
    tokenId _tokenBIn,
    uint256 _maxTokenB, 
    uint256 _deadline
  ) {
    require(height() <= _deadline);
    require(_amountTokenA > 0);
    require(_maxTokenB > 0);

    (tokenId _tokenA, tokenId _tokenB) = canonicalizePair(_tokenAIn, _tokenBIn);
    Pair storage _pair = pairs[_tokenA][_tokenB];
    require(_pair.initialized);

    uint256 amountTokenB;
    uint256 liquidityAdded;

    uint256 supplyA = _pair.tokenA == _tokenAIn ? _pair.supplyA : _pair.supplyB;
    uint256 supplyB = _pair.tokenA == _tokenAIn ? _pair.supplyB : _pair.supplyA;

    if (_pair.totalPoolSupply > 0) {
      // Add liquidity at current rate.
      amountTokenB = _amountTokenA * supplyB / supplyA + 1;
      require(amountTokenB <= _maxTokenB);
      if (_pair.tokenA == _tokenAIn) {
        liquidityAdded = _amountTokenA * _pair.totalPoolSupply / supplyA;
      } else {
        liquidityAdded = amountTokenB * _pair.totalPoolSupply / supplyB;
      }
    } else {
      // Initial liquidity for pair.
      amountTokenB = min(_maxTokenB, holdingPool[msg.sender][_tokenBIn]);
      require(_amountTokenA > 0 && amountTokenB > 0);
      if (_pair.tokenA == _tokenAIn) {
        liquidityAdded = _amountTokenA;
      } else {
        liquidityAdded = amountTokenB;
      }
    }

    // Update holding pool
    require(_amountTokenA <= holdingPool[msg.sender][_tokenAIn]);
    require(amountTokenB <= holdingPool[msg.sender][_tokenBIn]);
    holdingPool[msg.sender][_tokenAIn] -= _amountTokenA;
    holdingPool[msg.sender][_tokenBIn] -= amountTokenB;

    // Mint liquidity tokens
    _pair.poolBalances[msg.sender] += liquidityAdded;
    _pair.totalPoolSupply += liquidityAdded;

    // Increment overall supply
    if (_pair.tokenA == _tokenAIn) {
      _pair.supplyA += _amountTokenA;
      _pair.supplyB += amountTokenB;
    } else {
      _pair.supplyA += amountTokenB;
      _pair.supplyB += _amountTokenA;
    }

    send(msg.sender, addedLiquidity(_tokenAIn, _tokenBIn, liquidityAdded));
    emit AddLiquidity(
      msg.sender,
      _tokenAIn,
      _amountTokenA,
      _tokenBIn,
      amountTokenB
    );
  }

  // @notice Add exactly the number of tokens specified from the holding pool to the liquidity pool, swapping if needed.
  // @param _tokenA First token to add.
  // @param _amountTokenA Number of token A added.
  // @param _tokenB Second token to add.
  // @param _amountTokenB Number of token B added.
  // @param _deadline Time after which this transaction can no longer be executed.
  // @return addedLiquidity The amount of liquidity added.
    onMessage addLiquiditySwap(
    tokenId _tokenAIn,
    uint256 _amountTokenA, 
    tokenId _tokenBIn,
    uint256 _amountTokenB, 
    uint256 _deadline
  ) {
    require(height() <= _deadline);

    // Update holding pool
    require(_amountTokenA <= holdingPool[msg.sender][_tokenAIn]);
    require(_amountTokenB <= holdingPool[msg.sender][_tokenBIn]);
    holdingPool[msg.sender][_tokenAIn] -= _amountTokenA;
    holdingPool[msg.sender][_tokenBIn] -= _amountTokenB;

    // Update pair supply
    (tokenId _tokenA, tokenId _tokenB) = canonicalizePair(_tokenAIn, _tokenBIn);
    Pair storage _pair = pairs[_tokenA][_tokenB];
    require(_pair.initialized);

    uint256 _initialSupply1;
    uint256 _initialSupply2;
    uint256 _amount1;
    uint256 _amount2;
    if (_pair.tokenA == _tokenAIn) {
      _initialSupply1 = _pair.supplyA;
      _initialSupply2 = _pair.supplyB;
      _pair.supplyA += _amountTokenA;
      _pair.supplyB += _amountTokenB;
      _amount1 = _amountTokenA;
      _amount2 = _amountTokenB;
    } else {
      _initialSupply1 = _pair.supplyB;
      _initialSupply2 = _pair.supplyA;
      _pair.supplyA += _amountTokenB;
      _pair.supplyB += _amountTokenA;
      _amount1 = _amountTokenB;
      _amount2 = _amountTokenA;
    }

    uint256 _liquidityAdded;

    if (_pair.totalPoolSupply > 0) {
      // Add liquidity at current rate, charging for swap.
      uint256 _freeLiquidity = min(
        _amount1 * _pair.totalPoolSupply / _initialSupply1,
        _amount2 * _pair.totalPoolSupply / _initialSupply2
      );
      uint256 _swappedLiquidity = max(
        _amount1 * _pair.totalPoolSupply / _initialSupply1,
        _amount2 * _pair.totalPoolSupply / _initialSupply2
      ) - _freeLiquidity;
      _liquidityAdded = uint256(997) * _swappedLiquidity / uint256(1000) + _freeLiquidity;
    } else {
      // Initial liquidity for pair.
      require(_amount1 > 0 && _amount2 > 0);
      _liquidityAdded = _amount1;
    }

    _pair.poolBalances[msg.sender] += _liquidityAdded;
    _pair.totalPoolSupply += _liquidityAdded;

    send(msg.sender, addedLiquidity(_tokenAIn, _tokenBIn, _liquidityAdded));
    emit AddLiquidity(
      msg.sender,
      _tokenAIn,
      _amountTokenA,
      _tokenBIn,
      _amountTokenB
    );
  }

  // @notice Remove and withdraw tokens at current ratio.
  // @param _amount Amount of liquidity to remove.
  // @param _tokenA The first token in the pair.
  // @param _minTokenA Minimum number of token A removed.
  // @param _tokenB The second token in the pair.
  // @param _minTokenB Minimum number of token B removed.
  // @param _deadline Time after which this transaction can no longer be executed.
  onMessage removeLiquidity(
    uint256 _amount,
    tokenId _tokenAIn,
    uint256 _minTokenA,
    tokenId _tokenBIn,
    uint256 _minTokenB,
    uint256 _deadline
  ) {
    require(height() <= _deadline);

    (tokenId _tokenA, tokenId _tokenB) = canonicalizePair(_tokenAIn, _tokenBIn);
    Pair storage _pair = pairs[_tokenA][_tokenB];
    require(_pair.initialized);
    require(_amount <= _pair.totalPoolSupply);

    uint256 supplyA = _pair.tokenA == _tokenAIn ? _pair.supplyA : _pair.supplyB;
    uint256 supplyB = _pair.tokenA == _tokenAIn ? _pair.supplyB : _pair.supplyA;

    uint256 amountTokenA = _amount * supplyA / _pair.totalPoolSupply;
    uint256 amountTokenB = _amount * supplyB / _pair.totalPoolSupply;
    require(amountTokenA >= _minTokenA);
    require(amountTokenB >= _minTokenB);

    // Remove from pool
    require(_pair.poolBalances[msg.sender] >= _amount);
    _pair.poolBalances[msg.sender] -= _amount;
    _pair.totalPoolSupply -= _amount;
    if (_pair.tokenA == _tokenAIn) {
      _pair.supplyA -= amountTokenA;
      _pair.supplyB -= amountTokenB;
    } else {
      _pair.supplyA -= amountTokenB;
      _pair.supplyB -= amountTokenA;
    }

    // Return tokens to wallet
    msg.sender.transfer(_tokenAIn, amountTokenA);
    msg.sender.transfer(_tokenBIn, amountTokenB);

    emit RemoveLiquidity(
      msg.sender,
      _tokenAIn,
      amountTokenA,
      _tokenBIn,
      amountTokenB
    );
  }

  // --------------------
  // Swapping
  // --------------------

  // @dev Query current buy rate for a given pair
  getter getBuyRate(tokenId _tokenIdIn, uint256 _amountIn, tokenId _tokenIdOut) view returns (uint256) {
    (tokenId _tokenA, tokenId _tokenB) = canonicalizePair(_tokenIdIn, _tokenIdOut);
    Pair storage _pair = pairs[_tokenA][_tokenB];
    require(_pair.initialized);
    require(_pair.totalPoolSupply > 0);
    
    uint256 _inputSupply = _tokenIdIn == _pair.tokenA ? _pair.supplyA : _pair.supplyB;
    uint256 _outputSupply = _tokenIdIn == _pair.tokenA ? _pair.supplyB : _pair.supplyA;
    return getInputPrice(_amountIn, _inputSupply, _outputSupply);
  }

  // @dev Query current sell rate for a given pair
  getter getSellRate(tokenId _tokenIdOut, uint256 _amountOut, tokenId _tokenIdIn) view returns (uint256) {
    (tokenId _tokenA, tokenId _tokenB) = canonicalizePair(_tokenIdIn, _tokenIdOut);
    Pair storage _pair = pairs[_tokenA][_tokenB];
    require(_pair.initialized);
    require(_pair.totalPoolSupply > 0);
    
    uint256 _inputSupply = _tokenIdIn == _pair.tokenA ? _pair.supplyA : _pair.supplyB;
    uint256 _outputSupply = _tokenIdIn == _pair.tokenA ? _pair.supplyB : _pair.supplyA;
    return getOutputPrice(_amountOut, _inputSupply, _outputSupply);
  }

  // @dev Pricing function for converting between token A and token B
  // @param input_amount Amount of token A or token B being sold.
  // @param input_reserve Amount of token A or token B (input type) in exchange reserves.
  // @param output_reserve Amount of token A or token B (output type) in exchange reserves.
  // @return Amount of token A or token B bought.
  function getInputPrice(uint256 input_amount, uint256 input_reserve, uint256 output_reserve) private pure returns (uint256) {
    uint256 input_amount_with_fee = input_amount * 997;
    uint256 numerator = input_amount_with_fee * output_reserve;
    uint256 denominator = (input_reserve * 1000) + input_amount_with_fee;
    return numerator / denominator;
  }

  // @dev Pricing function for converting between token A and token B.
  // @param output_amount Amount of token A or token B being bought.
  // @param input_reserve Amount of token A or token B (input type) in exchange reserves.
  // @param output_reserve Amount of token A or token B (output type) in exchange reserves.
  // @return Amount of token A or token B sold.
  function getOutputPrice(uint256 output_amount, uint256 input_reserve, uint256 output_reserve) private pure returns (uint256) {
    uint256 numerator = input_reserve * output_amount * 1000;
    uint256 denominator = (output_reserve - output_amount) * 997;
    return numerator / denominator + 1;
  }

  // @notice Buy tokens
  // @dev User specifies exact input (msg.amount of msg.tokenId) and minimum output (slippage).
  // @param _outputTokenId Token to buy.
  // @param _minOutput Minimum tokens bought; fails if not met.
  // @param _deadline Height after which this swap can no longer be executed
  onMessage swapInput(tokenId _outputTokenId, uint256 _minOutput, uint256 _deadline) payable {
    require(height() <= _deadline);
    (tokenId _tokenA, tokenId _tokenB) = canonicalizePair(msg.tokenid, _outputTokenId);
    Pair storage _pair = pairs[_tokenA][_tokenB];
    require(_pair.initialized);
    require(_pair.totalPoolSupply > 0);

    uint256 supplyA = _pair.tokenA == msg.tokenid ? _pair.supplyA : _pair.supplyB;
    uint256 supplyB = _pair.tokenA == msg.tokenid ? _pair.supplyB : _pair.supplyA;

    uint256 tokenBBought = getInputPrice(msg.amount, supplyA, supplyB);
    require(tokenBBought <= supplyB);
    require(tokenBBought >= _minOutput);

    if (_pair.tokenA == msg.tokenid) {
      _pair.supplyA += msg.amount;
      _pair.supplyB -= tokenBBought;
    } else {
      _pair.supplyA -= tokenBBought;
      _pair.supplyB += msg.amount;
    }

    msg.sender.transfer(_outputTokenId, tokenBBought);

    emit Swap(
      msg.sender,
      msg.tokenid,
      msg.amount,
      _outputTokenId,
      tokenBBought
    );
  }

  // @notice Buy tokens
  // @dev User specifies maximum input (msg.amount of msg.tokenId) and exact output.
  // @param _outputTokenId Token to buy.
  // @param _numBought Amount of tokens bought.
  // @param _deadline Height after which this swap can no longer be executed
  onMessage swapOutput(tokenId _outputTokenId, uint256 _numBought, uint256 _deadline) payable {
    require(height() <= _deadline);
    (tokenId _tokenA, tokenId _tokenB) = canonicalizePair(msg.tokenid, _outputTokenId);
    Pair storage _pair = pairs[_tokenA][_tokenB];
    require(_pair.initialized);
    require(_pair.totalPoolSupply > 0);

    uint256 supplyA = _pair.tokenA == msg.tokenid ? _pair.supplyA : _pair.supplyB;
    uint256 supplyB = _pair.tokenA == msg.tokenid ? _pair.supplyB : _pair.supplyA;

    uint256 tokenASold = getOutputPrice(_numBought, supplyA, supplyB);
    require(tokenASold <= msg.amount);
    require(_numBought <= supplyB);

    if (_pair.tokenA == msg.tokenid) {
      _pair.supplyA += tokenASold;
      _pair.supplyB -= _numBought;
    } else {
      _pair.supplyA -= _numBought;
      _pair.supplyB += tokenASold;
    }

    if (msg.amount > tokenASold) {
        msg.sender.transfer(msg.tokenid, msg.amount - tokenASold);
    }
    msg.sender.transfer(_outputTokenId, _numBought);

    emit Swap(
      msg.sender,
      msg.tokenid,
      tokenASold,
      _outputTokenId,
      _numBought
    );
  }

  // --------------------
  // Utilities
  // --------------------

  function max(uint256 _a, uint256 _b) private pure returns (uint256) {
    return _a >= _b ? _a : _b;
  }

  function min(uint256 _a, uint256 _b) private pure returns (uint256) {
    return _a < _b ? _a : _b;
  }
}