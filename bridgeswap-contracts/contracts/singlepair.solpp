pragma soliditypp >=0.4.3;

//import './interfaces/IBridgeswapV1Pair.solpp';

contract SinglePair {
    // Invariants - 
    // Symbol A < Symbol B (tbd method, maybe hash each token ID)

    tokenId constant ZERO_TOKEN_ID = tokenId("tti_000000000000000000004cfd");

    bytes32 name = "Bridgeswap SinglePair";
    uint256 decimals = 18;

    tokenId tokenA;
    tokenId tokenB;
    bool initialized = false;

    uint256 supplyA = 0;
    uint256 supplyB = 0;

    mapping(address => uint256) poolBalanceA;
    mapping(address => uint256) poolBalanceB;

    address owner; 

    address factory; // TODO will hold factory address

    getter supportedTokens()returns (tokenId, tokenId) {
        return (tokenA, tokenB);
    }

    onMessage initialize(tokenId _tokenA, tokenId _tokenB) {
        require(!initialized);
        initialized = true;
        tokenA = _tokenA;
        tokenB = _tokenB;
    }

    // @dev Pricing function for converting between token A and token B
    // @param input_amount Amount of token A or token B being sold.
    // @param input_reserve Amount of token A or token B (input type) in exchange reserves.
    // @param output_reserve Amount of token A or token B (output type) in exchange reserves.
    // @return Amount of token A or token B bought.
    function getInputPrice(uint256 input_amount, uint256 input_reserve, uint256 output_reserve) private returns (uint256) {
        uint256 input_amount_with_fee = input_amount * 997;
        uint256 numerator = input_amount_with_fee * output_reserve;
        uint256 denominator = (input_reserve * 1000) + input_amount_with_fee;
        return numerator / denominator;
    }

    // @dev Pricing function for converting between token A and token B.
    // @param output_amount Amount of token A or token B being bought.
    // @param input_reserve Amount of token A or token B (input type) in exchange reserves.
    // @param output_reserve Amount of token A or token B (output type) in exchange reserves.
    // @return Amount of token A or token B sold.
    function getOutputPrice(uint256 output_amount, uint256 input_reserve, uint256 output_reserve) private returns (uint256) {
        uint256 numerator = input_reserve * output_amount * 1000;
        uint256 denominator = (output_reserve - output_amount) * 997;
        return numerator / denominator + 1;
    }
}