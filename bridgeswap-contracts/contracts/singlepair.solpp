// SPDX-License-Identifier: Unlicense
pragma soliditypp >=0.4.3;

contract SinglePair {
    // Invariants - 
    // Symbol A < Symbol B (tbd method, maybe hash each token ID)

    event AddLiquidity(
        address indexed provider,
        tokenId indexed tokenAId,
        uint256 tokenAAmount,
        tokenId indexed tokenBId,
        uint256 tokenBAmount
    );
    event Deposit(
        address indexed provider,
        tokenId indexed tokenid,
        uint256 amount
    );
    event RemoveLiquidity(
        address indexed provider,
        tokenId indexed tokenAId,
        uint256 tokenAAmount,
        tokenId indexed tokenBId,
        uint256 tokenBAmount
    );
    event Swap(
        address indexed destination, 
        tokenId indexed tokenSold, 
        uint256 amountSold,
        tokenId indexed tokenBought, 
        uint256 amountBought
    );
    event Withdrawal(
        address indexed provider,
        tokenId indexed tokenid,
        uint256 amounta
    );

    tokenId constant ZERO_TOKEN_ID = tokenId("tti_000000000000000000004cfd");

    bytes32 name = "Bridgeswap SinglePair";
    uint256 decimals = 18;

    tokenId tokenA;
    tokenId tokenB;
    bool initialized = false;

    uint256 supplyA = 0;
    uint256 supplyB = 0;

    uint256 totalPoolSupply = 0;
    mapping(address => uint256) poolBalances;

    // Holding pool
    struct BankAccount { // Idk if we need the struct here, maybe there is more we can pack in here in the future though
        mapping(tokenId => uint256) account;
    }

    mapping(address => BankAccount) bankAccounts;
    getter supportedTokens()returns (tokenId, tokenId) {
        return (tokenA, tokenB);
    }

    getter getPairSupply()returns (uint256, uint256) {
        return (supplyA, supplyB);
    }

    getter getBalanceAddressToken(address addr, tokenId token) returns (uint256) {
        return bankAccounts[addr].account[token];
    }

    onMessage initialize(tokenId _tokenA, tokenId _tokenB) {
        require(!initialized);
        initialized = true;
        tokenA = _tokenA;
        tokenB = _tokenB;
    }

    getter isInitialized() returns (bool) {
        return initialized;
    }

    // @dev Pricing function for converting between token A and token B
    // @param input_amount Amount of token A or token B being sold.
    // @param input_reserve Amount of token A or token B (input type) in exchange reserves.
    // @param output_reserve Amount of token A or token B (output type) in exchange reserves.
    // @return Amount of token A or token B bought.
    function getInputPrice(uint256 input_amount, uint256 input_reserve, uint256 output_reserve) private returns (uint256) {
        uint256 input_amount_with_fee = input_amount * 997;
        uint256 numerator = input_amount_with_fee * output_reserve;
        uint256 denominator = (input_reserve * 1000) + input_amount_with_fee;
        return numerator / denominator;
    }

    // @dev Pricing function for converting between token A and token B.
    // @param output_amount Amount of token A or token B being bought.
    // @param input_reserve Amount of token A or token B (input type) in exchange reserves.
    // @param output_reserve Amount of token A or token B (output type) in exchange reserves.
    // @return Amount of token A or token B sold.
    function getOutputPrice(uint256 output_amount, uint256 input_reserve, uint256 output_reserve) private returns (uint256) {
        uint256 numerator = input_reserve * output_amount * 1000;
        uint256 denominator = (output_reserve - output_amount) * 997;
        return numerator / denominator + 1;
    }

    // @notice Buy tokens
    // @dev User specifies exact input (msg.amount of msg.tokenId) and minimum output (slippage).
    // @param min_output Minimum tokens bought.
    // @param deadline Time after which this swap can no longer be executed
    onMessage swapInput(uint256 min_output, uint256 deadline) payable {
        require(msg.tokenid == tokenA); // TODO: generalize

        require(msg.tokenid == tokenA || msg.tokenid == tokenB);
        require(height() <= deadline);

        uint256 tokenBBought = getInputPrice(msg.amount, supplyA, supplyB);
        require(tokenBBought <= supplyB);
        require(tokenBBought >= min_output);

        supplyA += msg.amount;
        supplyB -= tokenBBought;

        msg.sender.transfer(tokenB, tokenBBought);

        emit Swap(
            msg.sender,
            tokenA,
            msg.amount,
            tokenB,
            tokenBBought
        );
    }

    // @notice Buy tokens
    // @dev User specifies maximum input (msg.amount of msg.tokenId) and exact output.
    // @param num_bought Amount of tokens bought.
    // @param deadline Time after which this swap can no longer be executed
    onMessage swapOutput(uint256 num_bought, uint256 deadline) payable {
        require(msg.tokenid == tokenA); // TODO: generalize

        require(msg.tokenid == tokenA || msg.tokenid == tokenB);
        require(height() <= deadline);

        uint256 tokenASold = getOutputPrice(num_bought, supplyA, supplyB);
        require(tokenASold <= msg.amount);
        require(num_bought <= supplyB);

        supplyA += tokenASold;
        supplyB -= num_bought;

        msg.sender.transfer(tokenA, msg.amount - tokenASold);
        msg.sender.transfer(tokenB, num_bought);

        emit Swap(
            msg.sender,
            tokenA,
            tokenASold,
            tokenB,
            num_bought
        );
    }

    onMessage deposit() payable {
        require(msg.tokenid == tokenA || msg.tokenid == tokenB);
        bankAccounts[msg.sender].account[msg.tokenid] += msg.amount;
        emit Deposit(msg.sender, msg.tokenid, msg.amount);
    }

    onMessage withdraw(uint256 amount, tokenId token) {
        require(token == tokenA || token == tokenB);
        uint256 senderBalance = bankAccounts[msg.sender].account[token];
        require(amount <= senderBalance);
        bankAccounts[msg.sender].account[token] -= amount;
        msg.sender.transfer(token, amount);
        emit Withdrawal(msg.sender, token, amount);
    }

    // @notice Move tokens from holding pool at current ratio.
    // @param amountTokenA Number of token A added.
    // @param maxTokenB Maximum number of token B added. Transaction fails if exceeded.
    // @param deadline Time after which this transaction can no longer be executed.
    // @return addedLiquidity The amount of liquidity added.
    message addedLiquidity(uint256 amount);
    onMessage addLiquidity(uint256 amountTokenA, uint256 maxTokenB, uint256 deadline) {
        // TODO: implement swap fee

        require(height() <= deadline);
        require(amountTokenA > 0);
        require(maxTokenB > 0);

        uint256 balanceA = bankAccounts[msg.sender].account[tokenA];
        uint256 balanceB = bankAccounts[msg.sender].account[tokenB];

        uint256 amountTokenB;
        uint256 liquidityAdded;

        if (totalPoolSupply > 0) {
            // Add liquidity at current rate.
            amountTokenB = amountTokenA * supplyB / supplyA + 1;
            require(amountTokenB <= maxTokenB);
            liquidityAdded = amountTokenA * totalPoolSupply / supplyA;
        } else {
            // Initial liquidity for pair.
            amountTokenB = min(maxTokenB, balanceB);
            liquidityAdded = amountTokenA;
        }
        // Update bank balance 
        require((amountTokenA <= balanceA) && (amountTokenB <= balanceB));
        bankAccounts[msg.sender].account[tokenA] -= amountTokenA;
        bankAccounts[msg.sender].account[tokenB] -= amountTokenB;

        // Mint pool tokens
        poolBalances[msg.sender] += liquidityAdded;
        totalPoolSupply += liquidityAdded;

        // Increment overall supply
        supplyA += amountTokenA;
        supplyB += amountTokenB;

        send(msg.sender, addedLiquidity(liquidityAdded));
        emit AddLiquidity(
            msg.sender,
            tokenA,
            amountTokenA,
            tokenB,
            amountTokenB
        );
    }

    // @notice Withdraw tokens at current ratio.
    // @param amount Amount of liquidity to remove.
    // @param minTokenA Minimum number of token A removed.
    // @param minTokenB Minimum number of token B removed.
    // @param deadline Time after which this transaction can no longer be executed.
    onMessage removeLiquidity(uint256 amount, uint256 minTokenA, uint256 minTokenB, uint256 deadline) {
        require(height() <= deadline);
        require(amount <= totalPoolSupply);

        uint256 amountTokenA = amount * supplyA / totalPoolSupply;
        uint256 amountTokenB = amount * supplyB / totalPoolSupply;
        require(amountTokenA >= minTokenA);
        require(amountTokenB >= minTokenB);

        // Remove from pool
        require(poolBalances[msg.sender] >= amount);
        poolBalances[msg.sender] -= amount;

        // Remove from supply
        supplyA -= amountTokenA;
        supplyB -= amountTokenB;
        totalPoolSupply -= amount;

        // Return tokens to wallet
        msg.sender.transfer(tokenA, amountTokenA);
        msg.sender.transfer(tokenB, amountTokenB);

        emit RemoveLiquidity(
            msg.sender,
            tokenA,
            amountTokenA,
            tokenB,
            amountTokenB
        );
    }

    // --------------------
    // Utilities
    // --------------------

    function max(uint256 a, uint256 b) private pure returns (uint256) {
        return a >= b ? a : b;
    }

    function min(uint256 a, uint256 b) private pure returns (uint256) {
        return a < b ? a : b;
    }

}
